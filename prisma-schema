// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis] // Enable postgis extension
}

// ==================================
// Enums
// ==================================

enum gender {
  male
  female
  none
}

enum freecycle_request_status {
  pending
  accepted
  rejected
}

enum volunteer_event_status {
  draft
  pending
  approved
  rejected
}

enum course_type {
  online
  onsite
  online_and_onsite
}

enum course_status {
  pending
  approve
  not_approve
}

enum wallet_type {
  individual
  organization
}

enum wallet_status {
  active
  suspended
}

enum transaction_type {
  top_up
  transfer_in
  transfer_out
  transfer_to_service
}

enum card_transaction_type {
  top_up
  charge
  refund
}

enum transaction_category {
  insurance
  metro
}

enum air_quality_category {
  good
  moderate
  unhealthy
  hazardous
}

enum report_level {
  near_miss
  minor
  moderate
  major
  lethal
}

enum report_status {
  pending
  verified
  resolved
}

enum sos_status {
  open
  closed
}

enum alert_status {
  unread
  read
  sent
}

enum apartment_internet {
  free
  not_free
  none
}

enum apartment_type {
  dormitory
  apartment
}

enum apartment_location {
  asoke
  prachauthit
  phathumwan
}

enum room_status {
  occupied
  pending
  available
}

enum booking_status {
  pending
  confirmed
  cancelled
}

// ==================================
// Models
// ==================================

model roles {
  id        Int      @id @default(autoincrement())
  role_name String   @unique @db.VarChar(50)
  users     users[]
}

model departments {
  id                      Int                       @id @default(autoincrement())
  department_name         String                    @unique @db.VarChar(255)
  created_at              DateTime                  @default(now()) @db.Timestamptz()
  updated_at              DateTime                  @updatedAt @db.Timestamptz()
  users_departments       users_departments[]
  freecycle_posts         freecycle_posts[]
  volunteer_events        volunteer_events[]
  events                  events[]
  facilities              facilities[]
}

model addresses {
  id                  Int                 @id @default(autoincrement())
  address_line        String?
  province            String?             @db.VarChar(255)
  district            String?             @db.VarChar(255)
  subdistrict         String?             @db.VarChar(255)
  postal_code         String?             @db.VarChar(20)
  location            Unsupported("geometry(Point,4326)")?
  created_at          DateTime            @default(now()) @db.Timestamptz()
  updated_at          DateTime            @updatedAt @db.Timestamptz()
  user_profiles       user_profiles[]
  volunteer_events    volunteer_events[]
  onsite_sessions     onsite_sessions[]
  events              events[]
  facilities          facilities[]
  emergency_calls     emergency_calls[]
  air_quality         air_quality[]
  weather_data        weather_data[]
  apartment           apartment[]

  @@index([location], type: Gist)
}

model users {
  id                    Int                       @id @default(autoincrement())
  username              String                    @unique @db.VarChar(50)
  email                 String                    @unique @db.VarChar(255)
  phone                 String?                   @unique @db.VarChar(20)
  password_hash         String                    @db.VarChar(512)
  role_id               Int?
  created_at            DateTime                  @default(now()) @db.Timestamptz()
  updated_at            DateTime                  @updatedAt @db.Timestamptz()
  last_login            DateTime?                 @db.Timestamptz()
  role                  roles?                    @relation(fields: [role_id], references: [id], onDelete: SetNull)
  user_profiles         user_profiles?
  users_departments     users_departments[]
  sessions              sessions[]
  refresh_tokens        refresh_tokens[]
  freecycle_posts       freecycle_posts[]
  receiver_requests     receiver_requests[]
  volunteer_events      volunteer_events[]
  volunteer_participation volunteer_event_participation[]
  courses               courses[]
  onsite_enrollments    onsite_enrollments[]
  user_exercises        user_exercises[]
  user_levels           user_levels?
  events                events[]
  event_bookmarks       event_bookmarks[]
  patients              patients[]
  appointments          appointments[]
  prescriptions         prescriptions[]
  wallets               wallets[]
  insurance_cards       insurance_cards[]
  metro_cards           metro_cards[]
  vehicles              vehicles[]
  traffic_emergencies   traffic_emergencies[]
  emergency_reports     emergency_reports[]
  emergency_contacts    emergency_contacts[]
  alerts                alerts[]
  fcm_token             fcm_token[]
  sos                   sos[]
  conversation_participants conversation_participants[]
  messages              messages[]
  digital_cards         digital_cards[]
  rating                rating[]
  apartment_owner       apartment_owner[]
  apartment_booking     apartment_booking[]
  Dim_User              Dim_User[]

  @@index([email])
  @@index([phone])
}

model user_profiles {
  user_id             Int       @id
  first_name          String?   @db.VarChar(255)
  middle_name         String?   @db.VarChar(255)
  last_name           String?   @db.VarChar(255)
  birth_date          DateTime? @db.Date
  gender              gender?
  address_id          Int?
  more_address_detail String?
  user                users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  address             addresses? @relation(fields: [address_id], references: [id], onDelete: SetNull)
}

model users_departments {
  user_id       Int
  department_id Int
  user          users       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  department    departments @relation(fields: [department_id], references: [id], onDelete: Cascade)

  @@id([user_id, department_id])
}

model sessions {
  session_id    String    @id @default(uuid()) @db.Uuid
  user_id       Int?
  created_at    DateTime  @default(now()) @db.Timestamptz()
  expires_at    DateTime? @db.Timestamptz()
  last_accessed DateTime? @db.Timestamptz()
  user          users?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model refresh_tokens {
  id            Int       @id @default(autoincrement())
  user_id       Int?
  refresh_token String
  created_at    DateTime  @default(now()) @db.Timestamptz()
  expires_at    DateTime? @db.Timestamptz()
  user          users?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model freecycle_categories {
  id                       Int                        @id @default(autoincrement())
  category_name            String                     @unique @db.VarChar(100)
  created_at               DateTime                   @default(now()) @db.Timestamptz()
  updated_at               DateTime                   @updatedAt @db.Timestamptz()
  freecycle_posts_categories freecycle_posts_categories[]
}

model freecycle_posts {
  id                      Int                        @id @default(autoincrement())
  item_name               String                     @db.VarChar(255)
  item_weight             Decimal?                   @db.Decimal(10, 3)
  photo_url               String?
  description             String?
  donater_id              Int?
  donate_to_department_id Int?
  is_given                Boolean                    @default(false)
  created_at              DateTime                   @default(now()) @db.Timestamptz()
  updated_at              DateTime                   @updatedAt @db.Timestamptz()
  donater                 users?                     @relation(fields: [donater_id], references: [id], onDelete: SetNull)
  donate_to_department    departments?               @relation(fields: [donate_to_department_id], references: [id], onDelete: SetNull)
  freecycle_posts_categories freecycle_posts_categories[]
  receiver_requests       receiver_requests[]
}

model freecycle_posts_categories {
  post_id     Int
  category_id Int
  post        freecycle_posts      @relation(fields: [post_id], references: [id], onDelete: Cascade)
  category    freecycle_categories @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@id([post_id, category_id])
}

model receiver_requests {
  id          Int                      @id @default(autoincrement())
  post_id     Int?
  receiver_id Int?
  status      freecycle_request_status @default(pending)
  created_at  DateTime                 @default(now()) @db.Timestamptz()
  updated_at  DateTime                 @updatedAt @db.Timestamptz()
  post        freecycle_posts?         @relation(fields: [post_id], references: [id], onDelete: Cascade)
  receiver    users?                   @relation(fields: [receiver_id], references: [id], onDelete: SetNull)
}

model volunteer_events {
  id                 Int                           @id @default(autoincrement())
  created_by_user_id Int?
  department_id      Int?
  image_url          String?
  title              String                        @db.VarChar(255)
  description        String?
  current_participants Int                         @default(0)
  total_seats        Int                         @default(1)
  start_at           DateTime?                     @db.Timestamptz()
  end_at             DateTime?                     @db.Timestamptz()
  registration_deadline DateTime?                  @db.Timestamptz()
  address_id         Int?
  status             volunteer_event_status        @default(draft)
  created_at         DateTime                      @default(now()) @db.Timestamptz()
  updated_at         DateTime                      @updatedAt @db.Timestamptz()
  created_by_user    users?                        @relation(fields: [created_by_user_id], references: [id], onDelete: SetNull)
  department         departments?                  @relation(fields: [department_id], references: [id], onDelete: SetNull)
  address            addresses?                    @relation(fields: [address_id], references: [id], onDelete: SetNull)
  participation      volunteer_event_participation[]

  /// Note: CHECK constraint from SQL is not represented here.
  @@index([start_at])
}

model volunteer_event_participation {
  id               Int               @id @default(autoincrement())
  volunteer_event_id Int?
  user_id          Int?
  created_at       DateTime          @default(now()) @db.Timestamptz()
  volunteer_event  volunteer_events? @relation(fields: [volunteer_event_id], references: [id], onDelete: Cascade)
  user             users?            @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model courses {
  id                 Int               @id @default(autoincrement())
  author_id          Int?
  course_name        String            @db.VarChar(255)
  course_description String?
  course_type        course_type
  course_status      course_status     @default(pending)
  cover_image        String?
  created_at         DateTime          @default(now()) @db.Timestamptz()
  updated_at         DateTime          @updatedAt @db.Timestamptz()
  author             users?            @relation(fields: [author_id], references: [id], onDelete: SetNull)
  course_videos      course_videos[]
  onsite_sessions    onsite_sessions[]
}

model course_videos {
  id                Int       @id @default(autoincrement())
  course_id         Int?
  video_name        String    @db.VarChar(255)
  video_description String?
  duration_minutes  Int
  video_order       Int
  video_file_path   String?
  created_at        DateTime  @default(now()) @db.Timestamptz()
  updated_at        DateTime  @updatedAt @db.Timestamptz()
  course            courses?  @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@unique([course_id, video_order])
}

model onsite_sessions {
  id                    Int                  @id @default(autoincrement())
  course_id             Int?
  address_id            Int?
  duration_hours        Decimal?             @db.Decimal(6, 2)
  event_at              DateTime             @db.Timestamptz()
  registration_deadline DateTime             @db.Timestamptz()
  total_seats           Int                  @default(1)
  created_at            DateTime             @default(now()) @db.Timestamptz()
  updated_at            DateTime             @updatedAt @db.Timestamptz()
  course                courses?             @relation(fields: [course_id], references: [id], onDelete: Cascade)
  address               addresses?           @relation(fields: [address_id], references: [id], onDelete: SetNull)
  onsite_enrollments    onsite_enrollments[]
}

model onsite_enrollments {
  id        Int             @id @default(autoincrement())
  onsite_id Int?
  user_id   Int?
  created_at DateTime       @default(now()) @db.Timestamptz()
  onsite    onsite_sessions? @relation(fields: [onsite_id], references: [id], onDelete: Cascade)
  user      users?           @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([onsite_id, user_id])
}

model questions {
  id             Int              @id @default(autoincrement())
  question       String
  level          Int?
  created_at     DateTime         @default(now()) @db.Timestamptz()
  updated_at     DateTime         @updatedAt @db.Timestamptz()
  user_exercises user_exercises[]
}

model user_exercises {
  id          Int        @id @default(autoincrement())
  user_id     Int?
  question_id Int?
  user_answer String?
  is_correct  Boolean?
  created_at  DateTime   @default(now()) @db.Timestamptz()
  user        users?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  question    questions? @relation(fields: [question_id], references: [id], onDelete: Cascade)
}

model user_levels {
  user_id       Int    @id
  current_level Int    @default(1)
  user          users  @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model events {
  id                   Int                    @id @default(autoincrement())
  host_user_id         Int?
  department_id        Int?
  image_url            String?
  title                String?                @db.VarChar(255)
  description          String?
  total_seats          Int?                   @default(0)
  start_at             DateTime?              @db.Timestamptz()
  end_at               DateTime?              @db.Timestamptz()
  address_id           Int?
  created_at           DateTime               @default(now()) @db.Timestamptz()
  updated_at           DateTime               @updatedAt @db.Timestamptz()
  host_user            users?                 @relation(fields: [host_user_id], references: [id], onDelete: SetNull)
  department           departments?           @relation(fields: [department_id], references: [id], onDelete: SetNull)
  address              addresses?             @relation(fields: [address_id], references: [id], onDelete: SetNull)
  event_bookmarks      event_bookmarks[]
  waste_event_statistics waste_event_statistics[]

  @@index([start_at])
}

model event_bookmarks {
  user_id    Int
  event_id   Int
  created_at DateTime @default(now()) @db.Timestamptz()
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  event      events   @relation(fields: [event_id], references: [id], onDelete: Cascade)

  @@id([user_id, event_id])
}

model patients {
  id              Int               @id @default(autoincrement())
  user_id         Int?
  emergency_contact String?         @db.VarChar(200)
  created_at      DateTime          @default(now()) @db.Timestamptz()
  user            users?            @relation(fields: [user_id], references: [id], onDelete: SetNull)
  beds            beds[]
  appointments    appointments[]
  prescriptions   prescriptions[]
  emergency_calls emergency_calls[]
  payments        payments[]
}

model facilities {
  id                 Int               @id @default(autoincrement())
  name               String            @db.VarChar(255)
  facility_type      String?           @db.VarChar(100)
  address_id         Int?
  phone              String?           @db.VarChar(20)
  location           Unsupported("geometry(Point,4326)")?
  emergency_services Boolean?          @default(false)
  department_id      Int?
  created_at         DateTime          @default(now()) @db.Timestamptz()
  address            addresses?        @relation(fields: [address_id], references: [id], onDelete: SetNull)
  department         departments?      @relation(fields: [department_id], references: [id], onDelete: SetNull)
  beds               beds[]
  appointments       appointments[]
  prescriptions      prescriptions[]
  ambulances         ambulances[]
  emergency_calls    emergency_calls[]
  payments           payments[]

  @@index([location], type: Gist)
}

model beds {
  id             Int        @id @default(autoincrement())
  facility_id    Int?
  bed_number     String?    @db.VarChar(50)
  bed_type       String?    @db.VarChar(50)
  status         String?    @db.VarChar(50)
  patient_id     Int?
  admission_date DateTime?  @db.Timestamptz()
  created_at     DateTime   @default(now()) @db.Timestamptz()
  facility       facilities? @relation(fields: [facility_id], references: [id], onDelete: Cascade)
  patient        patients?   @relation(fields: [patient_id], references: [id], onDelete: SetNull)
}

model appointments {
  id            Int        @id @default(autoincrement())
  patient_id    Int?
  facility_id   Int?
  staff_user_id Int?
  appointment_at DateTime? @db.Timestamptz()
  type          String?    @db.VarChar(50)
  status        String?    @db.VarChar(50)
  created_at    DateTime   @default(now()) @db.Timestamptz()
  patient       patients?  @relation(fields: [patient_id], references: [id], onDelete: SetNull)
  facility      facilities? @relation(fields: [facility_id], references: [id], onDelete: SetNull)
  staff_user    users?     @relation(fields: [staff_user_id], references: [id], onDelete: SetNull)
}

model prescriptions {
  id                 Int        @id @default(autoincrement())
  patient_id         Int?
  prescriber_user_id Int?
  facility_id        Int?
  medication_name    String?    @db.VarChar(255)
  quantity           Int?
  status             String?    @db.VarChar(50)
  created_at         DateTime   @default(now()) @db.Timestamptz()
  patient            patients?  @relation(fields: [patient_id], references: [id], onDelete: SetNull)
  prescriber_user    users?     @relation(fields: [prescriber_user_id], references: [id], onDelete: SetNull)
  facility           facilities? @relation(fields: [facility_id], references: [id], onDelete: SetNull)
}

model ambulances {
  id               Int               @id @default(autoincrement())
  vehicle_number   String?           @unique @db.VarChar(50)
  status           String?           @db.VarChar(50)
  current_location Unsupported("geometry(Point,4326)")?
  base_facility_id Int?
  created_at       DateTime          @default(now()) @db.Timestamptz()
  base_facility    facilities?       @relation(fields: [base_facility_id], references: [id], onDelete: SetNull)
  emergency_calls  emergency_calls[]
}

model emergency_calls {
  id             Int         @id @default(autoincrement())
  patient_id     Int?
  caller_phone   String?     @db.VarChar(20)
  emergency_type String?     @db.VarChar(100)
  severity       String?     @db.VarChar(50)
  address_id     Int?
  ambulance_id   Int?
  facility_id    Int?
  status         String?     @db.VarChar(50)
  created_at     DateTime    @default(now()) @db.Timestamptz()
  patient        patients?   @relation(fields: [patient_id], references: [id], onDelete: SetNull)
  address        addresses?  @relation(fields: [address_id], references: [id], onDelete: SetNull)
  ambulance      ambulances? @relation(fields: [ambulance_id], references: [id], onDelete: SetNull)
  facility       facilities? @relation(fields: [facility_id], references: [id], onDelete: SetNull)
}

model payments {
  id               Int        @id @default(autoincrement())
  patient_id       Int?
  facility_id      Int?
  service_type     String?    @db.VarChar(100)
  service_id       Int?
  amount           Decimal?   @default(0) @db.Decimal(12, 2)
  currency         String?    @default("THB") @db.Char(3)
  payment_method   String?    @db.VarChar(50)
  insurance_coverage Decimal? @default(0) @db.Decimal(12, 2)
  patient_copay    Decimal?   @default(0) @db.Decimal(12, 2)
  status           String?    @db.VarChar(50)
  payment_date     DateTime?  @db.Timestamptz()
  created_at       DateTime   @default(now()) @db.Timestamptz()
  patient          patients?  @relation(fields: [patient_id], references: [id], onDelete: SetNull)
  facility         facilities? @relation(fields: [facility_id], references: [id], onDelete: SetNull)
}

model team_integrations {
  id              Int      @id @default(autoincrement())
  team_name       String?  @db.VarChar(100)
  external_table  String?  @db.VarChar(100)
  external_id     String?  @db.VarChar(100)
  data_type       String?  @db.VarChar(50)
  status          String?  @db.VarChar(50)
  additional_data Json?    @db.JsonB
  created_at      DateTime @default(now()) @db.Timestamptz()
}

model wallets {
  id                  Int                  @id @default(autoincrement())
  owner_id            Int?
  wallet_type         wallet_type?
  organization_type   String?              @db.VarChar(100)
  balance             Decimal?             @default(0) @db.Decimal(14, 2)
  status              wallet_status?       @default(active)
  created_at          DateTime             @default(now()) @db.Timestamptz()
  updated_at          DateTime             @updatedAt @db.Timestamptz()
  owner               users?               @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  wallet_transactions wallet_transactions[] @relation("source_wallet")
  target_transactions wallet_transactions[] @relation("target_wallet")

  @@unique([owner_id, wallet_type])
}

model wallet_transactions {
  id               Int              @id @default(autoincrement())
  wallet_id        Int?
  transaction_type transaction_type?
  amount           Decimal          @db.Decimal(14, 2)
  target_wallet_id Int?
  target_service   String?          @db.VarChar(50)
  description      String?          @db.VarChar(255)
  created_at       DateTime         @default(now()) @db.Timestamptz()
  wallet           wallets?         @relation("source_wallet", fields: [wallet_id], references: [id], onDelete: Cascade)
  target_wallet    wallets?         @relation("target_wallet", fields: [target_wallet_id], references: [id], onDelete: SetNull)
}

model insurance_cards {
  id         Int           @id @default(autoincrement())
  user_id    Int?
  balance    Decimal?      @default(0) @db.Decimal(14, 2)
  card_number String?      @unique @db.VarChar(50)
  status     wallet_status? @default(active)
  created_at DateTime      @default(now()) @db.Timestamptz()
  updated_at DateTime      @updatedAt @db.Timestamptz()
  user       users?        @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model metro_cards {
  id         Int           @id @default(autoincrement())
  user_id    Int?
  balance    Decimal?      @default(0) @db.Decimal(14, 2)
  card_number String?      @unique @db.VarChar(50)
  status     wallet_status? @default(active)
  created_at DateTime      @default(now()) @db.Timestamptz()
  updated_at DateTime      @updatedAt @db.Timestamptz()
  user       users?        @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model card_transactions {
  id                   Int                   @id @default(autoincrement())
  card_id              Int
  card_type            String?               @db.VarChar(50)
  transaction_type     card_transaction_type?
  transaction_category transaction_category?
  reference            String?               @db.VarChar(100)
  amount               Decimal?              @default(0) @db.Decimal(12, 2)
  description          String?               @db.VarChar(255)
  created_at           DateTime              @default(now()) @db.Timestamptz()
}

model intersections {
  id                  Int            @id @default(autoincrement())
  location            Unsupported("geometry(Point,4326)")?
  traffic_lights      traffic_lights[]
  roads_start         roads[]        @relation("start_intersection")
  roads_end           roads[]        @relation("end_intersection")
}

model traffic_lights {
  id              Int            @id @default(autoincrement())
  intersection_id Int?
  ip_address      String?        @db.Inet
  location        Unsupported("geometry(Point,4326)")?
  status          Int?
  current_color   Int?           @db.SmallInt
  density_level   Int?           @db.SmallInt
  auto_mode       Boolean?       @default(true)
  last_updated    DateTime       @default(now()) @db.Timestamptz()
  intersection    intersections? @relation(fields: [intersection_id], references: [id], onDelete: SetNull)
  light_requests  light_requests[]

  @@index([location], type: Gist)
}

model roads {
  id                    Int            @id @default(autoincrement())
  name                  String?        @db.VarChar(255)
  start_intersection_id Int?
  end_intersection_id   Int?
  length_meters         Int?
  start_intersection    intersections? @relation("start_intersection", fields: [start_intersection_id], references: [id], onDelete: SetNull)
  end_intersection      intersections? @relation("end_intersection", fields: [end_intersection_id], references: [id], onDelete: SetNull)
}

model light_requests {
  id               Int             @id @default(autoincrement())
  traffic_light_id Int?
  requested_at     DateTime        @default(now()) @db.Timestamptz()
  traffic_light    traffic_lights? @relation(fields: [traffic_light_id], references: [id], onDelete: Cascade)
}

model vehicles {
  id                   Int                   @id @default(autoincrement())
  user_id              Int?
  current_location     Unsupported("geometry(Point,4326)")?
  vehicle_plate        String?               @db.VarChar(20)
  user                 users?                @relation(fields: [user_id], references: [id], onDelete: SetNull)
  traffic_emergencies  traffic_emergencies[]
}

model traffic_emergencies {
  id                   Int       @id @default(autoincrement())
  user_id              Int?
  accident_location    Unsupported("geometry(Point,4326)")?
  destination_hospital String?   @db.VarChar(255)
  status               String?   @db.VarChar(50)
  ambulance_vehicle_id Int?
  created_at           DateTime  @default(now()) @db.Timestamptz()
  user                 users?    @relation(fields: [user_id], references: [id], onDelete: SetNull)
  ambulance_vehicle    vehicles? @relation(fields: [ambulance_vehicle_id], references: [id], onDelete: SetNull)
}

model report_categories {
  id                Int                 @id @default(autoincrement())
  name              String              @unique @db.VarChar(255)
  created_at        DateTime            @default(now()) @db.Timestamptz()
  updated_at        DateTime            @updatedAt @db.Timestamptz()
  emergency_reports emergency_reports[]
}

model emergency_reports {
  id                 Int                @id @default(autoincrement())
  user_id            Int?
  image_url          String?            @db.VarChar(1024)
  description        String?
  location           Unsupported("geometry(Point,4326)")?
  ambulance_service  Boolean?           @default(false)
  level              report_level?
  status             report_status?     @default(pending)
  report_category_id Int?
  created_at         DateTime           @default(now()) @db.Timestamptz()
  updated_at         DateTime           @updatedAt @db.Timestamptz()
  user               users?             @relation(fields: [user_id], references: [id], onDelete: SetNull)
  report_category    report_categories? @relation(fields: [report_category_id], references: [id], onDelete: SetNull)
  alerts             alerts[]

  @@index([location], type: Gist)
}

model emergency_contacts {
  id           Int      @id @default(autoincrement())
  user_id      Int?
  contact_name String   @db.VarChar(255)
  phone        String?  @db.VarChar(20)
  user         users?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model alerts {
  id        Int               @id @default(autoincrement())
  report_id Int?
  user_id   Int?
  message   String
  status    alert_status?     @default(unread)
  location  Unsupported("geometry(Point,4326)")?
  sent_at   DateTime?         @default(now()) @db.Timestamptz()
  report    emergency_reports? @relation(fields: [report_id], references: [id], onDelete: Cascade)
  user      users?            @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model fcm_token {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  created_at DateTime? @default(now()) @db.Timestamptz()
  updated_at DateTime? @default(now()) @db.Timestamptz()
  user       users?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model sos {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  location   Unsupported("geometry(Point,4326)")?
  status     sos_status? @default(open)
  created_at DateTime? @default(now()) @db.Timestamptz()
  updated_at DateTime? @default(now()) @db.Timestamptz()
  user       users?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model conversations {
  id                      Int                         @id @default(autoincrement())
  conversation_name       String?                     @db.VarChar(255)
  created_at              DateTime                    @default(now()) @db.Timestamptz()
  conversation_participants conversation_participants[]
  messages                messages[]
}

model conversation_participants {
  conversation_id Int
  user_id         Int
  conversation    conversations @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  user            users         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([conversation_id, user_id])
}

model messages {
  id              Int            @id @default(autoincrement())
  conversation_id Int?
  sender_id       Int?
  message_text    String?
  sent_at         DateTime       @default(now()) @db.Timestamptz()
  conversation    conversations? @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  sender          users?         @relation(fields: [sender_id], references: [id], onDelete: SetNull)
}

model air_quality {
  id          Int                  @id @default(autoincrement())
  location_id Int?
  aqi         Decimal?             @db.Decimal(6, 2)
  pm25        Decimal?             @db.Decimal(8, 3)
  pm10        Decimal?             @db.Decimal(8, 3)
  co          Decimal?             @db.Decimal(8, 3)
  no2         Decimal?             @db.Decimal(8, 3)
  so2         Decimal?             @db.Decimal(8, 3)
  o3          Decimal?             @db.Decimal(8, 3)
  category    air_quality_category?
  measured_at DateTime             @default(now()) @db.Timestamptz()
  location    addresses?           @relation(fields: [location_id], references: [id], onDelete: SetNull)
}

model weather_data {
  id                   Int       @id @default(autoincrement())
  location_id          Int?
  temperature          Decimal?  @db.Decimal(6, 2)
  feel_temperature     Decimal?  @db.Decimal(6, 2)
  humidity             Decimal?  @db.Decimal(6, 2)
  wind_speed           Decimal?  @db.Decimal(6, 2)
  wind_direction       String?   @db.VarChar(50)
  rainfall_probability Decimal?  @db.Decimal(5, 2)
  created_at           DateTime  @default(now()) @db.Timestamptz()
  updated_at           DateTime  @updatedAt @db.Timestamptz()
  location             addresses? @relation(fields: [location_id], references: [id], onDelete: SetNull)
}

model digital_cards {
  id                        Int                         @id @default(autoincrement())
  user_id                   Int?
  status                    String                      @default("active") @db.VarChar(20)
  user                      users?                      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  transportation_transactions transportation_transactions[]
}

model transportation_vehicle_types {
  id     Int      @id @default(autoincrement())
  name   String   @db.VarChar(100)
  routes routes[]
}

model routes {
  id                        Int                         @id @default(autoincrement())
  route_name                String?                     @db.VarChar(255)
  vehicle_type_id           Int?
  vehicle_type              transportation_vehicle_types? @relation(fields: [vehicle_type_id], references: [id], onDelete: SetNull)
  route_stops               route_stops[]
  transportation_transactions transportation_transactions[]
}

model stops {
  id          Int         @id @default(autoincrement())
  name        String?     @db.VarChar(255)
  location    Unsupported("geometry(Point,4326)")?
  route_stops route_stops[]
}

model route_stops {
  id                      Int      @id @default(autoincrement())
  route_id                Int?
  stop_id                 Int?
  stop_order              Int?
  travel_time_to_next_stop Int?
  route                   routes?  @relation(fields: [route_id], references: [id], onDelete: Cascade)
  stop                    stops?   @relation(fields: [stop_id], references: [id], onDelete: Cascade)
}

model transportation_transactions {
  id         Int            @id @default(autoincrement())
  card_id    Int?
  route_id   Int?
  amount     Decimal?       @db.Decimal(12, 2)
  status     String?        @db.VarChar(50)
  created_at DateTime       @default(now()) @db.Timestamptz()
  card       digital_cards? @relation(fields: [card_id], references: [id], onDelete: SetNull)
  route      routes?        @relation(fields: [route_id], references: [id], onDelete: SetNull)
}

model apartment {
  id                 Int                 @id @default(autoincrement())
  name               String?             @db.VarChar(255)
  phone              String?             @db.VarChar(10)
  description        String?
  rating_id          Int?
  electric_price     Float?
  water_price        Float?
  internet           apartment_internet?
  apartment_type     apartment_type?
  apartment_location apartment_location?
  address_id         Int?
  address            addresses?          @relation(fields: [address_id], references: [id])
  rating             rating?             @relation(fields: [rating_id], references: [id])
  room               room[]
  apartment_picture  apartment_picture[]
  apartment_owner    apartment_owner[]
}

model room {
  id           Int         @id @default(autoincrement())
  name         String?     @db.VarChar(255)
  type         String?     @db.VarChar(255)
  size         String?     @db.VarChar(50)
  room_status  room_status?
  price_start  Float?
  price_end    Float?
  apartment_id Int?
  apartment    apartment?  @relation(fields: [apartment_id], references: [id])
}

model apartment_picture {
  id           Int       @id @default(autoincrement())
  name         String?   @db.VarChar(255)
  file_path    String
  apartment_id Int
  apartment    apartment @relation(fields: [apartment_id], references: [id])
}

model rating {
  id         Int         @id @default(autoincrement())
  user_id    Int
  rating     Float?
  comment    String?
  created_at DateTime?   @db.Timestamptz()
  user       users       @relation(fields: [user_id], references: [id])
  apartment  apartment[]
}

model apartment_owner {
  id           Int       @id @default(autoincrement())
  user_id      Int
  apartment_id Int
  user         users     @relation(fields: [user_id], references: [id])
  apartment    apartment @relation(fields: [apartment_id], references: [id])
}

model apartment_booking {
  id             Int             @id @default(autoincrement())
  user_id        Int
  check_in       DateTime?       @db.Timestamptz()
  booking_status booking_status? @default(pending)
  created_at     DateTime?       @db.Timestamptz()
  updated_at     DateTime?       @db.Timestamptz()
  user           users           @relation(fields: [user_id], references: [id])
}

model waste_types {
  id                   Int                      @id @default(autoincrement())
  type_name            String                   @db.VarChar(255)
  typical_weight_kg    Decimal?                 @db.Decimal(10, 3)
  waste_event_statistics waste_event_statistics[]
}

model waste_event_statistics {
  id                 Int                 @id @default(autoincrement())
  event_id           Int?
  waste_type_id      Int?
  collection_date    DateTime?           @db.Timestamptz()
  total_collection_weight Decimal?       @db.Decimal(12, 3)
  event              events?             @relation(fields: [event_id], references: [id], onDelete: SetNull)
  waste_type         waste_types?        @relation(fields: [waste_type_id], references: [id], onDelete: SetNull)
  power_bi_reports   power_bi_reports[]
}

model power_bi_reports {
  id                       Int                     @id @default(autoincrement())
  waste_event_statistic_id Int?
  report_type              String?                 @db.VarChar(255)
  report_date              DateTime?               @db.Timestamptz()
  created_at               DateTime                @default(now()) @db.Timestamptz()
  waste_event_statistic    waste_event_statistics? @relation(fields: [waste_event_statistic_id], references: [id], onDelete: SetNull)
}

model Dim_Time {
  time_id       Int             @id
  date_actual   DateTime?       @db.Date
  year_val      Int?
  month_val     Int?
  day_val       Int?
  hour_val      Int?
  Fact_Traffic  Fact_Traffic[]
  Fact_Waste    Fact_Waste[]
  Fact_Healthcare Fact_Healthcare[]
  Fact_Weather  Fact_Weather[]
  Fact_Population Fact_Population[]
}

model Dim_Location {
  location_id   Int             @id
  district      String?         @db.VarChar(255)
  coordinates   Unsupported("geometry(Point,4326)")?
  Dim_Facility  Dim_Facility[]
  Fact_Traffic  Fact_Traffic[]
  Fact_Waste    Fact_Waste[]
  Fact_Weather  Fact_Weather[]
  Fact_Population Fact_Population[]
}

model Dim_Facility {
  facility_id   Int             @id
  facility_name String?         @db.VarChar(255)
  location_id   Int?
  Dim_Location  Dim_Location?   @relation(fields: [location_id], references: [location_id])
  Fact_Healthcare Fact_Healthcare[]
}

model Dim_Waste_Type {
  waste_type_id   Int          @id
  waste_type_name String?      @db.VarChar(255)
  Fact_Waste      Fact_Waste[]
}

model Dim_User {
  user_id            Int                @id
  full_name          String?            @db.VarChar(255)
  email              String?            @unique @db.VarChar(255)
  role_string        String?            @db.VarChar(100)
  Reports_Metadata   Reports_Metadata[]
  user               users?             @relation(fields: [user_id], references: [id])
}

model Dim_Category {
  category_id          Int                @id
  category_name        String?            @db.VarChar(255)
  category_description String?
  Reports_Metadata     Reports_Metadata[]
}

model Reports_Metadata {
  report_id                 Int         @id
  title_string              String?     @db.VarChar(255)
  description_string        String?
  category_id               Int?
  created_by                Int?
  last_updated_datetime     DateTime?   @db.Timestamptz()
  power_bi_report_id_string String?     @db.VarChar(255)
  Dim_Category              Dim_Category? @relation(fields: [category_id], references: [category_id])
  Dim_User                  Dim_User?   @relation(fields: [created_by], references: [user_id])
}

model Fact_Traffic {
  traffic_id              Int          @id
  time_id                 Int?
  location_id             Int?
  vehicle_count           Int?
  has_accident_flag       Boolean?
  density_level_numeric   Decimal?     @db.Decimal(10, 2)
  Dim_Time                Dim_Time?    @relation(fields: [time_id], references: [time_id])
  Dim_Location            Dim_Location? @relation(fields: [location_id], references: [location_id])
}

model Fact_Waste {
  waste_id                     Int           @id
  time_id                      Int?
  location_id                  Int?
  waste_type_id                Int?
  collection_weight_kg_numeric Decimal?      @db.Decimal(10, 2)
  Dim_Time                     Dim_Time?     @relation(fields: [time_id], references: [time_id])
  Dim_Location                 Dim_Location? @relation(fields: [location_id], references: [location_id])
  Dim_Waste_Type               Dim_Waste_Type? @relation(fields: [waste_type_id], references: [waste_type_id])
}

model Fact_Healthcare {
  health_id                     Int           @id
  time_id                       Int?
  facility_id                   Int?
  avg_wait_time_minutes_numeric Decimal?      @db.Decimal(10, 2)
  bed_occupancy_percent_numeric Decimal?      @db.Decimal(5, 2)
  total_revenue_numeric         Decimal?      @db.Decimal(15, 2)
  Dim_Time                      Dim_Time?     @relation(fields: [time_id], references: [time_id])
  Dim_Facility                  Dim_Facility? @relation(fields: [facility_id], references: [facility_id])
}

model Fact_Weather {
  weather_id            Int           @id
  time_id               Int?
  location_id           Int?
  avg_aqi_numeric       Decimal?      @db.Decimal(10, 2)
  max_pm25_numeric      Decimal?      @db.Decimal(10, 2)
  avg_temperature_numeric Decimal?    @db.Decimal(5, 2)
  Dim_Time              Dim_Time?     @relation(fields: [time_id], references: [time_id])
  Dim_Location          Dim_Location? @relation(fields: [location_id], references: [location_id])
}

model Fact_Population {
  population_id            Int           @id
  time_id                  Int?
  location_id              Int?
  total_population         Int?
  population_density_numeric Decimal?    @db.Decimal(10, 2)
  median_age_numeric       Decimal?      @db.Decimal(5, 2)
  Dim_Time                 Dim_Time?     @relation(fields: [time_id], references: [time_id])
  Dim_Location             Dim_Location? @relation(fields: [location_id], references: [location_id])
}

model marker_type {
  id                Int       @id @default(autoincrement())
  marker_type_icon  String?   @db.VarChar(255)
  marker_type_color String?   @db.VarChar(255)
  created_at        DateTime  @default(now()) @db.Timestamptz()
  updated_at        DateTime  @updatedAt @db.Timestamptz()
  marker            marker[]
}

model marker {
  id             Int          @id @default(autoincrement())
  marker_type_id Int?
  description    String?
  location       Unsupported("geometry(Point,4326)")?
  created_at     DateTime     @default(now()) @db.Timestamptz()
  updated_at     DateTime     @updatedAt @db.Timestamptz()
  marker_type    marker_type? @relation(fields: [marker_type_id], references: [id], onDelete: Cascade)
}
